#![allow(unused_imports)]
#![allow(dead_code)]

use std::fs::read_to_string;

use bodhi::Update;

{% for release in releases -%}
const JSON_{{ release }}: &str = concat!(env!("CARGO_MANIFEST_DIR"), "/tests/data/updates_{{ release.lower() }}.json");
{% endfor %}

{% for release in releases -%}
#[cfg(feature = "data-tests")]
#[test]
fn updates_dejson_{{ release.lower() }}() {
    let updates: Vec<Update> = serde_json::from_str(&read_to_string(JSON_{{ release }}).unwrap()).unwrap();

    for update in &updates {
        if !update.extra.is_empty() {
            println!("{:#?}", update.extra);
        }

        assert!(update.extra.is_empty());
    }

    // check if an optional field is no longer present
    if !updates.is_empty() {
        assert!(!updates.iter().all(|u| u.comments.is_none()));
        assert!(!updates.iter().all(|u| u.content_type.is_none()));
        assert!(!updates.iter().all(|u| u.date_approved.is_none()));
        assert!(!updates.iter().all(|u| u.date_modified.is_none()));
        assert!(!updates.iter().all(|u| u.date_pushed.is_none()));
        assert!(!updates.iter().all(|u| u.date_stable.is_none()));
        assert!(!updates.iter().all(|u| u.date_submitted.is_none()));
        assert!(!updates.iter().all(|u| u.date_testing.is_none()));
        assert!(!updates.iter().all(|u| u.karma.is_none()));
        assert!(!updates.iter().all(|u| u.requirements.is_none()));
        assert!(!updates.iter().all(|u| u.stable_days.is_none()));
        assert!(!updates.iter().all(|u| u.stable_karma.is_none()));
        assert!(!updates.iter().all(|u| u.test_cases.is_none()));
        assert!(!updates.iter().all(|u| u.unstable_karma.is_none()));
    }
}

{% endfor %}